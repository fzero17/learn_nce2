{"version":3,"sources":["util.js","Article.js","List.js","App.js","serviceWorker.js","index.js"],"names":["readLocalJson","a","datas","axios","get","then","response","data","Article","useState","aritcles","setArticles","useEffect","index","useParams","className","to","length","content","List","map","article","key","title","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAEO,SAAeA,IAAtB,+B,4CAAO,4BAAAC,EAAA,6DACDC,EAAQ,KADP,SAECC,IAAMC,IAAI,gBAAgBC,MAAK,SAAAC,GACnCJ,EAAQI,EAASC,QAHd,gCAKEL,GALF,4C,4BCwBQM,MApBf,WAAoB,IAAD,EACeC,mBAAS,IADxB,mBACVC,EADU,KACAC,EADA,KAEjBC,qBAAU,WACRZ,IAAgBK,MAAK,SAAAC,GACnBK,EAAYL,QAEb,IANc,IAQXO,EAAUC,cAAVD,MACN,OACE,yBAAKE,UAAU,OACb,kBAAC,IAAD,CAAMC,GAAG,SAAT,gBACA,2BACGN,GAAYA,EAASO,OAAS,EAAIP,EAASG,GAAOK,QAAU,UAE/D,uDCcSC,MA9Bf,WAAiB,IAAD,EACkBV,mBAAS,IAD3B,mBACPC,EADO,KACGC,EADH,KAQd,OANAC,qBAAU,WACRZ,IAAgBK,MAAK,SAAAC,GACnBK,EAAYL,QAEb,IAGD,yBAAKS,UAAU,OACb,wSAGA,4MAKCL,EAASU,KAAI,SAACC,EAASR,GAAV,OACZ,wBAAIS,IAAKT,GACP,kBAAC,IAAD,CAAMG,GAAE,mBAAcH,IACnBA,EAAQ,EADX,IACeQ,EAAQE,WAI3B,uDCRSC,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUV,GAAG,UAEf,kBAAC,IAAD,CAAOU,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,mBACV,kBAAC,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.00f5400b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport async function readLocalJson() {\n  let datas = null;\n  await axios.get(\"../data.json\").then(response => {\n    datas = response.data;\n  });\n  return datas;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { readLocalJson } from \"./util\";\n\nimport \"./App.css\";\n\nfunction Article() {\n  const [aritcles, setArticles] = useState([]);\n  useEffect(() => {\n    readLocalJson().then(response => {\n      setArticles(response);\n    });\n  }, []);\n\n  let { index } = useParams();\n  return (\n    <div className=\"App\">\n      <Link to=\"/list\">返回</Link>\n      <p>\n        {aritcles && aritcles.length > 0 ? aritcles[index].content : \"tbc...\"}\n      </p>\n      <footer>fzero17 © 2019</footer>\n    </div>\n  );\n}\n\nexport default Article;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { readLocalJson } from \"./util\";\nimport { Link } from \"react-router-dom\";\n\nfunction List() {\n  const [aritcles, setArticles] = useState([]);\n  useEffect(() => {\n    readLocalJson().then(response => {\n      setArticles(response);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <p>\n        本页面用来背诵新概念2英语课程，文章内容为默写，不可作为正确参考。后续会根据课本改正内容。\n      </p>\n      <p>\n        This web page use to remember nce2 English Program.The article's content\n        were written by memory, can't used to be genellay. I will correct the\n        content according to the book.\n      </p>\n      {aritcles.map((article, index) => (\n        <h3 key={index}>\n          <Link to={`/article/${index}`}>\n            {index + 1}-{article.title}\n          </Link>\n        </h3>\n      ))}\n      <footer>fzero17 © 2019</footer>\n    </div>\n  );\n}\n\nexport default List;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport Article from \"./Article\";\nimport List from \"./List\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\">\n        <Redirect to=\"list\" />\n      </Route>\n      <Route path=\"/list\">\n        <List />\n      </Route>\n      <Route path=\"/article/:index\">\n        <Article />\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}